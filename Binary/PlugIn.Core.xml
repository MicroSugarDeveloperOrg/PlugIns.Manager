<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PlugIn.Core</name>
    </assembly>
    <members>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.Add(`0)">
            <summary>
            If a list does not already exist, it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value to a list with the given key. If a list does not already exist,
            it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
            <param name="value">The value to add to the list under the given key.</param>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.Clear">
            <summary>
            Removes all entries in the dictionary.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>true if the dictionary contains the value in any list; otherwise, false.</returns>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the given key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>true if the dictionary contains the given key; otherwise, false.</returns>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.FindAllValuesByKey(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements from the list which have a key that matches the condition
            defined by the specified predicate.
            </summary>
            <param name="keyFilter">The filter with the condition to use to filter lists by their key.</param>
            <returns>The elements that have a key that matches the condition defined by the specified predicate.</returns>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.FindAllValues(System.Predicate{`1})">
            <summary>
            Retrieves all the elements that match the condition defined by the specified predicate.
            </summary>
            <param name="valueFilter">The filter with the condition to use to filter values.</param>
            <returns>The elements that match the condition defined by the specified predicate.</returns>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.Remove(`0)">
            <summary>
            Removes a list by key.
            </summary>
            <param name="key">The key of the list to remove.</param>
            <returns><see langword="true" /> if the element was removed.</returns>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.RemoveValue(`0,`1)">
            <summary>
            Removes a value from the list with the given key.
            </summary>
            <param name="key">The key of the list where the value exists.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.RemoveValue(`1)">
            <summary>
            Removes a value from all lists where it may be found.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="P:PlugIn.Core.Common.ListDictionary`2.Values">
            <summary>
            Gets a shallow copy of all values in all lists.
            </summary>
            <value>List of values.</value>
        </member>
        <member name="P:PlugIn.Core.Common.ListDictionary`2.Keys">
            <summary>
            Gets the list of keys in the dictionary.
            </summary>
            <value>Collection of keys.</value>
        </member>
        <member name="P:PlugIn.Core.Common.ListDictionary`2.Item(`0)">
            <summary>
            Gets or sets the list associated with the given key. The
            access always succeeds, eventually returning an empty list.
            </summary>
            <param name="key">The key of the list to access.</param>
            <returns>The list associated with the key.</returns>
        </member>
        <member name="P:PlugIn.Core.Common.ListDictionary`2.Count">
            <summary>
            Gets the number of lists in the dictionary.
            </summary>
            <value>Value indicating the values count.</value>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/> for more information.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> for more information.
            </summary>
        </member>
        <member name="P:PlugIn.Core.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#Values">
            <summary>
            See <see cref="P:System.Collections.Generic.IDictionary`2.Values"/> for more information.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for more information.
            </summary>
        </member>
        <member name="P:PlugIn.Core.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> for more information.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Common.ListDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="F:PlugIn.Core.Enum.InitializationMode.WhenAvailable">
            <summary>
            The module will be initialized when it is available on application start-up.
            </summary>
        </member>
        <member name="F:PlugIn.Core.Enum.InitializationMode.OnDemand">
            <summary>
            The module will be initialized when requested, and not automatically on application start-up.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Events.ModuleDownloadProgressChangedEventArgs.#ctor(PlugIn.Core.IModuleInfo,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Events.ModuleDownloadProgressChangedEventArgs"/> class.
            </summary>
            <param name="moduleInfo">The module info.</param>
            <param name="bytesReceived">The bytes received.</param>
            <param name="totalBytesToReceive">The total bytes to receive.</param>
        </member>
        <member name="P:PlugIn.Core.Events.ModuleDownloadProgressChangedEventArgs.ModuleInfo">
            <summary>
            Gets the module info.
            </summary>
            <value>The module info.</value>
        </member>
        <member name="P:PlugIn.Core.Events.ModuleDownloadProgressChangedEventArgs.BytesReceived">
            <summary>
            Gets the bytes received.
            </summary>
            <value>The bytes received.</value>
        </member>
        <member name="P:PlugIn.Core.Events.ModuleDownloadProgressChangedEventArgs.TotalBytesToReceive">
            <summary>
            Gets the total bytes to receive.
            </summary>
            <value>The total bytes to receive.</value>
        </member>
        <member name="M:PlugIn.Core.Exceptions.CyclicDependencyFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.CyclicDependencyFoundException"/> class.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Exceptions.CyclicDependencyFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.CyclicDependencyFoundException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.CyclicDependencyFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.CyclicDependencyFoundException"/> class
            with the specified error message and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.CyclicDependencyFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.DuplicateModuleException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.DuplicateModuleException"/> class.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Exceptions.DuplicateModuleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.DuplicateModuleException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.DuplicateModuleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.DuplicateModuleException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.DuplicateModuleException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.DuplicateModuleException" /> class with a specified error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.DuplicateModuleException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.DuplicateModuleException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModularityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.ModularityException"/> class.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModularityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.ModularityException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModularityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.ModularityException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModularityException.#ctor(System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModularityException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="P:PlugIn.Core.Exceptions.ModularityException.ModuleName">
            <summary>
            Gets or sets the name of the module that this exception refers to.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleInitializeException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleInitializeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.ModuleInitializeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleInitializeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.ModuleInitializeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleInitializeException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleAssembly">The assembly where the module is located.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleInitializeException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception 
            that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleAssembly">The assembly where the module is located.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleInitializeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.ModuleNotFoundException" /> class.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.ModuleNotFoundException" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.ModuleNotFoundException" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.ModuleNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.Exceptions.ModuleNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleTypeLoadingException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleTypeLoadingException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleTypeLoadingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleTypeLoadingException.#ctor(System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:PlugIn.Core.Exceptions.ModuleTypeLoadingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:PlugIn.Core.Extensions.IModuleCatalogCommonExtensions.Exists``1(PlugIn.Core.IModuleCatalog)">
            <summary>
            Checks to see if the <see cref="T:PlugIn.Core.IModule"/> exists in the <see cref="P:PlugIn.Core.IModuleCatalog.Modules"/>  
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <typeparam name="T">The <see cref="T:PlugIn.Core.IModule"/> to check for.</typeparam>
        </member>
        <member name="M:PlugIn.Core.Extensions.IModuleCatalogCommonExtensions.Exists(PlugIn.Core.IModuleCatalog,System.String)">
            <summary>
            Exists the specified catalog and name.
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:PlugIn.Core.Extensions.IModuleCatalogCommonExtensions.GetModuleState``1(PlugIn.Core.IModuleCatalog)">
            <summary>
            Gets the current <see cref="T:PlugIn.Core.Enum.ModuleState"/> of the <see cref="T:PlugIn.Core.IModule"/>.
            </summary>
            <typeparam name="T">The <see cref="T:PlugIn.Core.IModule"/> to check.</typeparam>
            <param name="catalog">Catalog.</param>
            <returns></returns>
        </member>
        <member name="M:PlugIn.Core.Extensions.IModuleCatalogCommonExtensions.GetModuleState(PlugIn.Core.IModuleCatalog,System.String)">
            <summary>
            Gets the current <see cref="T:PlugIn.Core.Enum.ModuleState"/> of the <see cref="T:PlugIn.Core.IModule"/>.
            </summary>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
            <returns></returns>
        </member>
        <member name="M:PlugIn.Core.Extensions.IModuleCatalogCommonExtensions.IsInitialized``1(PlugIn.Core.IModuleCatalog)">
            <summary>
            Checks to see if the <see cref="T:PlugIn.Core.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="catalog">Catalog.</param>
            <typeparam name="T">The <see cref="T:PlugIn.Core.IModule"/> to check.</typeparam>
        </member>
        <member name="M:PlugIn.Core.Extensions.IModuleCatalogCommonExtensions.IsInitialized(PlugIn.Core.IModuleCatalog,System.String)">
            <summary>
            Checks to see if the <see cref="T:PlugIn.Core.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:PlugIn.Core.Extensions.IPlugInManagerExtensions.ModuleExists``1(PlugIn.Core.IPlugInManager)">
            <summary>
            Checks to see if the <see cref="T:PlugIn.Core.IModule"/> exists in the <see cref="P:PlugIn.Core.IModuleCatalog.Modules"/>  
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="manager">The <see cref="T:PlugIn.Core.IPlugInManager"/>.</param>
            <typeparam name="T">The <see cref="T:PlugIn.Core.IModule"/> to check for.</typeparam>
        </member>
        <member name="M:PlugIn.Core.Extensions.IPlugInManagerExtensions.ModuleExists(PlugIn.Core.IPlugInManager,System.String)">
            <summary>
            Exists the specified catalog and name.
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:PlugIn.Core.Extensions.IPlugInManagerExtensions.GetModuleState``1(PlugIn.Core.IPlugInManager)">
            <summary>
            Gets the current <see cref="T:PlugIn.Core.Enum.ModuleState"/> of the <see cref="T:PlugIn.Core.IModule"/>.
            </summary>
            <typeparam name="T">The <see cref="T:PlugIn.Core.IModule"/> to check.</typeparam>
            <param name="manager">The <see cref="T:PlugIn.Core.IPlugInManager"/>.</param>
            <returns></returns>
        </member>
        <member name="M:PlugIn.Core.Extensions.IPlugInManagerExtensions.GetModuleState(PlugIn.Core.IPlugInManager,System.String)">
            <summary>
            Gets the current <see cref="T:PlugIn.Core.Enum.ModuleState"/> of the <see cref="T:PlugIn.Core.IModule"/>.
            </summary>
            <param name="manager">The <see cref="T:PlugIn.Core.IPlugInManager"/>.</param>
            <param name="name">Name.</param>
            <returns></returns>
        </member>
        <member name="M:PlugIn.Core.Extensions.IPlugInManagerExtensions.IsModuleInitialized``1(PlugIn.Core.IPlugInManager)">
            <summary>
            Checks to see if the <see cref="T:PlugIn.Core.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="manager">The <see cref="T:PlugIn.Core.IPlugInManager"/>.</param>
            <typeparam name="T">The <see cref="T:PlugIn.Core.IModule"/> to check.</typeparam>
        </member>
        <member name="M:PlugIn.Core.Extensions.IPlugInManagerExtensions.IsModuleInitialized(PlugIn.Core.IPlugInManager,System.String)">
            <summary>
            Checks to see if the <see cref="T:PlugIn.Core.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="manager">The <see cref="T:PlugIn.Core.IPlugInManager"/>.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:PlugIn.Core.Extensions.IPlugInManagerExtensions.LoadModule``1(PlugIn.Core.IPlugInManager)">
            <summary>
            Loads and initializes the module in the <see cref="T:PlugIn.Core.IModuleCatalog"/>.
            </summary>
            <typeparam name="T">The <see cref="T:PlugIn.Core.IModule"/> to load.</typeparam>
            <param name="manager">The <see cref="T:PlugIn.Core.IPlugInManager"/>.</param>
        </member>
        <member name="M:PlugIn.Core.IModule.RegisterTypes(PlugIn.Core.Ioc.IServiceRegistry)">
            <summary>
            Used to register types with the container that will be used by your application.
            </summary>
        </member>
        <member name="M:PlugIn.Core.IModule.OnInitialized(System.IServiceProvider)">
            <summary>
            Notifies the module that it has been initialized.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Modularity.AssemblyResolver.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>Calls <see cref="M:PlugIn.Core.Modularity.AssemblyResolver.Dispose(System.Boolean)"/></remarks>.
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:PlugIn.Core.Modularity.AssemblyResolver.Dispose(System.Boolean)">
            <summary>
            Disposes the associated <see cref="T:PlugIn.Core.Modularity.AssemblyResolver"/>.
            </summary>
            <param name="disposing">When <see langword="true"/>, it is being called from the Dispose method.</param>
        </member>
        <member name="P:PlugIn.Core.Modularity.DirectoryModuleCatalog.ModulePath">
            <summary>
            Directory containing modules to search for.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Modularity.DirectoryModuleCatalog.InnerLoad">
            <summary>
            Drives the main logic of building the child domain and searching for the assemblies.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Modularity.IAssemblyResolver.LoadAssemblyFrom(System.String)">
            <summary>
            Load an assembly when it's required by the application. 
            </summary>
            <param name="assemblyFilePath"></param>
        </member>
        <member name="M:PlugIn.Core.Modularity.IModuleInitializer.Initialize(PlugIn.Core.IModuleInfo)">
            <summary>
            Initializes the specified module.
            </summary>
            <param name="moduleInfo">The module to initialize</param>
        </member>
        <member name="M:PlugIn.Core.Modularity.IModuleInitializer.Run(System.IServiceProvider,PlugIn.Core.IModule)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.IModuleCatalog"/> class.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.#ctor(System.Collections.Generic.IEnumerable{PlugIn.Core.IModuleInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:PlugIn.Core.IModuleCatalog"/> class while providing an
            initial list of <see cref="T:PlugIn.Core.IModuleInfo"/>s.
            </summary>
            <param name="modules">The initial list of modules.</param>
        </member>
        <member name="P:PlugIn.Core.Modularity.ModuleCatalogBase.Items">
            <summary>
            Gets the items in the <see cref="T:PlugIn.Core.IModuleCatalog"/>. This property is mainly used to add <see cref="T:PlugIn.Core.Modularity.IModuleInfoGroup"/>s or
            <see cref="T:PlugIn.Core.IModuleInfo"/>s through XAML.
            </summary>
            <value>The items in the catalog.</value>
        </member>
        <member name="P:PlugIn.Core.Modularity.ModuleCatalogBase.Modules">
            <summary>
            Gets all the <see cref="T:PlugIn.Core.IModuleInfo"/> classes that are in the <see cref="T:PlugIn.Core.IModuleCatalog"/>, regardless
            if they are within a <see cref="T:PlugIn.Core.Modularity.IModuleInfoGroup"/> or not.
            </summary>
            <value>The modules.</value>
        </member>
        <member name="P:PlugIn.Core.Modularity.ModuleCatalogBase.Groups">
            <summary>
            Gets the <see cref="T:PlugIn.Core.Modularity.IModuleInfoGroup"/>s that have been added to the <see cref="T:PlugIn.Core.IModuleCatalog"/>.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:PlugIn.Core.Modularity.ModuleCatalogBase.Validated">
            <summary>
            Gets or sets a value that remembers whether the <see cref="T:PlugIn.Core.Modularity.ModuleCatalogBase"/> has been validated already.
            </summary>
        </member>
        <member name="P:PlugIn.Core.Modularity.ModuleCatalogBase.GrouplessModules">
            <summary>
            Returns the list of <see cref="T:PlugIn.Core.IModuleInfo"/>s that are not contained within any <see cref="T:PlugIn.Core.Modularity.IModuleInfoGroup"/>.
            </summary>
            <value>The groupless modules.</value>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.Load">
            <summary>
            Loads the catalog if necessary.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.GetDependentModules(PlugIn.Core.IModuleInfo)">
            <summary>
            Return the list of <see cref="T:PlugIn.Core.IModuleInfo"/>s that <paramref name="moduleInfo"/> depends on.
            </summary>
            <remarks>
            If  the <see cref="T:PlugIn.Core.IModuleCatalog"/> was not yet validated, this method will call <see cref="M:PlugIn.Core.Modularity.ModuleCatalogBase.Validate"/>.
            </remarks>
            <param name="moduleInfo">The <see cref="T:PlugIn.Core.IModuleInfo"/> to get the </param>
            <returns>An enumeration of <see cref="T:PlugIn.Core.IModuleInfo"/> that <paramref name="moduleInfo"/> depends on.</returns>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{PlugIn.Core.IModuleInfo})">
            <summary>
            Returns a list of <see cref="T:PlugIn.Core.IModuleInfo"/>s that contain both the <see cref="T:PlugIn.Core.IModuleInfo"/>s in
            <paramref name="modules"/>, but also all the modules they depend on.
            </summary>
            <param name="modules">The modules to get the dependencies for.</param>
            <returns>
            A list of <see cref="T:PlugIn.Core.IModuleInfo"/> that contains both all <see cref="T:PlugIn.Core.IModuleInfo"/>s in <paramref name="modules"/>
            but also all the <see cref="T:PlugIn.Core.IModuleInfo"/> they depend on.
            </returns>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.Validate">
            <summary>
            Validates the <see cref="T:PlugIn.Core.IModuleCatalog"/>.
            </summary>
            <exception cref="T:PlugIn.Core.Exceptions.ModularityException">When validation of the <see cref="T:PlugIn.Core.IModuleCatalog"/> fails.</exception>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.AddModule(PlugIn.Core.IModuleInfo)">
            <summary>
            Adds a <see cref="T:PlugIn.Core.IModuleInfo"/> to the <see cref="T:PlugIn.Core.IModuleCatalog"/>.
            </summary>
            <param name="moduleInfo">The <see cref="T:PlugIn.Core.IModuleInfo"/> to add.</param>
            <returns>The <see cref="T:PlugIn.Core.IModuleCatalog"/> for easily adding multiple modules.</returns>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.Initialize">
            <summary>
            Initializes the catalog, which may load and validate the modules.
            </summary>
            <exception cref="T:PlugIn.Core.Exceptions.ModularityException">When validation of the <see cref="T:PlugIn.Core.Modularity.ModuleCatalogBase"/> fails, because this method calls <see cref="M:PlugIn.Core.Modularity.ModuleCatalogBase.Validate"/>.</exception>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.SolveDependencies(System.Collections.Generic.IEnumerable{PlugIn.Core.IModuleInfo})">
            <summary>
            Checks for cyclic dependencies, by calling the dependency solver.
            </summary>
            <param name="modules">the.</param>
            <returns></returns>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.ValidateDependencies(System.Collections.Generic.IEnumerable{PlugIn.Core.IModuleInfo})">
            <summary>
            Ensures that all the dependencies within <paramref name="modules"/> refer to <see cref="T:PlugIn.Core.IModuleInfo"/>s
            within that list.
            </summary>
            <param name="modules">The modules to validate modules for.</param>
            <exception cref="T:PlugIn.Core.Exceptions.ModularityException">
            Throws if a <see cref="T:PlugIn.Core.IModuleInfo"/> in <paramref name="modules"/> depends on a module that's
            not in <paramref name="modules"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="modules"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.InnerLoad">
            <summary>
            Does the actual work of loading the catalog.  The base implementation does nothing.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.Sort(System.Collections.Generic.IEnumerable{PlugIn.Core.IModuleInfo})">
            <summary>
            Sorts a list of <see cref="T:PlugIn.Core.IModuleInfo"/>s. This method is called by <see cref="M:PlugIn.Core.Modularity.ModuleCatalogBase.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{PlugIn.Core.IModuleInfo})"/>
            to return a sorted list.
            </summary>
            <param name="modules">The <see cref="T:PlugIn.Core.IModuleInfo"/>s to sort.</param>
            <returns>Sorted list of <see cref="T:PlugIn.Core.IModuleInfo"/>s</returns>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.ValidateUniqueModules">
            <summary>
            Makes sure all modules have an Unique name.
            </summary>
            <exception cref="T:PlugIn.Core.Exceptions.DuplicateModuleException">
            Thrown if the names of one or more modules are not unique.
            </exception>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.ValidateDependencyGraph">
            <summary>
            Ensures that there are no cyclic dependencies.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.ValidateCrossGroupDependencies">
            <summary>
            Ensures that there are no dependencies between modules on different groups.
            </summary>
            <remarks>
            A groupless module can only depend on other groupless modules.
            A module within a group can depend on other modules within the same group and/or on groupless modules.
            </remarks>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.ValidateDependenciesInitializationMode">
            <summary>
            Ensures that there are no modules marked to be loaded <see cref="F:PlugIn.Core.Enum.InitializationMode.WhenAvailable"/>
            depending on modules loaded <see cref="F:PlugIn.Core.Enum.InitializationMode.OnDemand"/>
            </summary>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.GetDependentModulesInner(PlugIn.Core.IModuleInfo)">
            <summary>
            Returns the <see cref="T:PlugIn.Core.IModuleInfo"/> on which the received module depends on.
            </summary>
            <param name="moduleInfo">Module whose dependant modules are requested.</param>
            <returns>Collection of <see cref="T:PlugIn.Core.IModuleInfo"/> dependants of <paramref name="moduleInfo"/>.</returns>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleCatalogBase.EnsureCatalogValidated">
            <summary>
            Ensures that the catalog is validated.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleInitializer.CreateModule(PlugIn.Core.IModuleInfo)">
            <summary>
            Uses the container to resolve a new <see cref="T:PlugIn.Core.IModule"/> by specifying its <see cref="T:System.Type"/>.
            </summary>
            <param name="moduleInfo">The module to create.</param>
            <returns>A new instance of the module specified by <paramref name="moduleInfo"/>.</returns>
        </member>
        <member name="M:PlugIn.Core.Modularity.ModuleInitializer.CreateModule(System.String)">
            <summary>
            Uses the container to resolve a new <see cref="T:PlugIn.Core.IModule"/> by specifying its <see cref="T:System.Type"/>.
            </summary>
            <param name="typeName">The type name to resolve. This type must implement <see cref="T:PlugIn.Core.IModule"/>.</param>
            <returns>A new instance of <paramref name="typeName"/>.</returns>
        </member>
        <member name="M:PlugIn.Core.Modularity.PlugInManager.LoadModulesThatAreReadyForLoad">
            <summary>
            Loads the modules that are not initialized and have their dependencies loaded.
            </summary>
        </member>
        <member name="M:PlugIn.Core.Modularity.PlugInManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>Calls <see cref="M:PlugIn.Core.Modularity.PlugInManager.Dispose(System.Boolean)"/></remarks>.
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:PlugIn.Core.Modularity.PlugInManager.Dispose(System.Boolean)">
            <summary>
            Disposes the associated <see cref="T:PlugIn.Core.Modularity.IModuleTypeLoader"/>s.
            </summary>
            <param name="disposing">When <see langword="true"/>, it is being called from the Dispose method.</param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
    </members>
</doc>
